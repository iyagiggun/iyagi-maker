import { Sprite } from 'pixi.js';
import { Coords } from '../Utils/Coordinate';
declare type SpriteInfo = {
    coordsList: Coords[];
    collisionCoords?: Coords;
};
export declare type IDirection = 'up' | 'down' | 'left' | 'right';
export declare type IObjectInfo = {
    photoInfo?: {
        default: string;
        [key: string]: string;
    };
    spriteUrl: string;
    up?: SpriteInfo;
    down: SpriteInfo;
    left?: SpriteInfo;
    right?: SpriteInfo;
    pos?: [x: number, y: number, z?: number];
    dir?: IDirection;
    visible?: boolean;
    passable?: boolean;
};
export default class IObject {
    private name;
    private objInfo;
    private photo;
    private photoTextureMap?;
    private sprite;
    private upS;
    private downS;
    private leftS;
    private rightS;
    private passable;
    private collisionMod?;
    private reaction?;
    constructor(name: string, objInfo: IObjectInfo);
    private getDirFrames;
    isLoaded(): boolean;
    load(): Promise<void>;
    getName(): string;
    getPhoto(): Sprite;
    changePhoto(key: string): void;
    getSprite(): Sprite;
    getCollisionMod(): Coords;
    setReaction(reaction: () => Promise<void>): void;
    getReaction(): (() => Promise<void>) | undefined;
    react(): Promise<void>;
    isPassable(): boolean;
    private getTexture;
    getPos(): [number, number];
    setPos(x: number, y: number, zMod?: number): this;
    getWidth(): number;
    getHeight(): number;
    getGlobalPos(): number[];
    getCollisionCoords(): number[];
    getDirection(): IDirection;
    changeDirection(deltaX: number, deltaY: number): this;
    setDirection(direction: IDirection): this;
    play(_speed: number): void;
    isPlaying(): boolean;
    stop(): void;
    hide(): void;
    show(): void;
    wait(time?: number): Promise<void>;
    getCenterPos(): [number, number];
    getCoordinateRelationship(target: IObject): {
        distance: number;
        xDiff: number;
        yDiff: number;
    };
}
export {};
